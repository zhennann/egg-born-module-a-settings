{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/model/settings.js","webpack://backend/./backend/src/model/settingsRef.js","webpack://backend/./backend/src/config/constants.js","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/settings.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/settings.js","webpack://backend/./backend/src/config/middleware/adapter/settings.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js","webpack://backend/./backend/src/config/validation/keywords.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/settings.js","webpack://backend/./backend/src/controller/test.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA,qC;;;;;;ACAA;;AAEA;;AAEA;AACA,kBAAkB,+BAA+B,uBAAuB,EAAE;AAC1E;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,kCAAkC,uBAAuB,EAAE;AAC7E;;AAEA;;AAEA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACLA,iBAAiB,mBAAO,CAAC,CAAe;AACxC,eAAe,mBAAO,CAAC,CAAa;AACpC,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,EAAoB;AAC3C,oBAAoB,mBAAO,CAAC,EAAyB;AACrD,kBAAkB,mBAAO,CAAC,CAAuB;;AAEjD;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,EAAW;AAClC,iBAAiB,mBAAO,CAAC,EAAa;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3BA,gBAAgB,mBAAO,CAAC,CAAsB;AAC9C,iBAAiB,mBAAO,CAAC,CAAuB;;AAEhD;AACA;AACA;AACA;;;;;;;ACNA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6DAA6D,qBAAqB;AAClF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;AC7DA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,SAAS;AACjC,4EAA4E,SAAS;AACrF,sEAAsE,SAAS;AAC/E;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,eAAe;AACvC,yDAAyD,eAAe;AACxE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B,wEAAwE,SAAS;AACjF,kEAAkE,SAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,eAAe;AACnC,qDAAqD,eAAe;AACpE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC/EA,iBAAiB,mBAAO,CAAC,CAAqB;AAC9C,oBAAoB,mBAAO,CAAC,CAAwB;;AAEpD;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;ACxCA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;;;;;;;ACFA,iBAAiB,mBAAO,CAAC,EAA0B;;AAEnD;AACA;AACA;;;;;;;ACJA,mBAAmB,mBAAO,CAAC,EAAuB;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;AClBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,wBAAwB,mBAAO,CAAC,CAA4B;AAC5D,2BAA2B,mBAAO,CAAC,CAA+B;AAClE,kBAAkB,mBAAO,CAAC,CAAoB;;AAE9C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,eAAe;AAClC,8BAA8B,8BAA8B;AAC5D;;AAEA,uBAAuB,eAAe;AACtC,8BAA8B,kCAAkC;AAChE;;;AAGA;;AAEA;AACA,oBAAoB;AACpB,uCAAuC,oCAAoC;AAC3E;;AAEA;AACA,oBAAoB;AACpB,iCAAiC,oCAAoC;AACrE;;AAEA,4BAA4B,eAAe;AAC3C,uCAAuC,8BAA8B;AACrE;;AAEA;;AAEA;AACA,oBAAoB;AACpB,uCAAuC,wCAAwC;AAC/E;;AAEA;AACA,oBAAoB;AACpB,iCAAiC,wCAAwC;AACzE;;AAEA,gCAAgC,eAAe;AAC/C,uCAAuC,kCAAkC;AACzE;;AAEA;;AAEA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,kCAAkC;AAClC;;AAEA,yBAAyB,sBAAsB;AAC/C;AACA,4CAA4C,gBAAgB;AAC5D,qCAAqC;AACrC;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,sBAAsB;AACzD;;AAEA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,kDAAkD;AACtF;;AAEA,6BAA6B,wCAAwC;AACrE,sCAAsC,4BAA4B;AAClE,oCAAoC,mDAAmD;AACvF;;AAEA,6BAA6B,oCAAoC;AACjE;AACA;AACA,2BAA2B,KAAK,GAAG,IAAI;AACvC;AACA;AACA,wCAAwC,0EAA0E;AAClH,SAAS;AACT,wCAAwC,iEAAiE;AACzG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA,0BAA0B,2BAA2B;AACrD;;AAEA,gBAAgB,4BAA4B;AAC5C,4CAA4C,gBAAgB;AAC5D;AACA,qDAAqD,+EAA+E;AACpI,4BAA4B,cAAc,kBAAkB;AAC5D;;AAEA;;AAEA;AACA;;;;;;;AChMA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,EAAgC;AAC5D;AACA,qBAAqB,mBAAO,CAAC,EAAiC;AAC9D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;AC3FA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,8EAA8E;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;AC9BA,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,iBAAiB,mBAAO,CAAC,EAA0B;AACnD,aAAa,mBAAO,CAAC,EAAsB;;AAE3C;AACA;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK,kFAAkF;AACvF;AACA,KAAK;AACL,aAAa,SAAS,qCAAqC,EAAE;AAC7D,KAAK;AACL,KAAK;AACL,aAAa,SAAS,qCAAqC,EAAE;AAC7D,KAAK;AACL,KAAK;AACL,aAAa,SAAS,qCAAqC,EAAE;AAC7D,KAAK;AACL;AACA,KAAK,uFAAuF;AAC5F,KAAK,uFAAuF;AAC5F,KAAK,uFAAuF;AAC5F;AACA;AACA;AACA,OAAO,8EAA8E;AACrF;AACA;AACA;AACA;;;;;;;AC9BA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACfA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACvCA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,uDAAuD,yBAAyB;AAChF;AACA,mDAAmD,qCAAqC;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;;AAE5D;AACA,mDAAmD,qCAAqC;AACxF;;AAEA;;AAEA;AACA,uDAAuD,sBAAsB;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;;AAEhE;AACA,uDAAuD,sBAAsB;AAC7E;;AAEA;AACA;;AAEA;AACA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"require3\");","module.exports = app => {\n\n  class Settings extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aSettings', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return Settings;\n};\n","module.exports = app => {\n\n  class SettingsRef extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aSettingsRef', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return SettingsRef;\n};\n","module.exports = {\n  scene: {\n    user: 1,\n    instance: 2,\n  },\n};\n","const services = require('./services.js');\nconst models = require('./models.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\nconst constants = require('./config/constants.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  // meta\n  const meta = require('./meta.js')(app);\n  const routes = require('./routes.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    constants,\n    meta,\n  };\n\n};\n","const version = require('./service/version.js');\nconst settings = require('./service/settings.js');\n\nmodule.exports = {\n  version,\n  settings,\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aSettings\n        let sql = `\n          CREATE TABLE aSettings (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            scene int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            value json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aSettingsRef\n        sql = `\n          CREATE TABLE aSettingsRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            scene int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            value json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // function\n        const func = await this.ctx.meta.function.get({\n          name: 'settings',\n        });\n        // role function right\n        const role = await this.ctx.meta.role.getSystemRole({ roleName: 'system' });\n        await this.ctx.meta.role.addRoleFunction({\n          roleId: role.id,\n          functionId: func.id,\n        });\n      }\n    }\n\n  }\n\n  return Version;\n};\n","module.exports = app => {\n\n  let _instanceList = null;\n  let _userList = null;\n\n  class Settings extends app.Service {\n\n    // instance\n\n    instanceList() {\n      if (!_instanceList) {\n        _instanceList = this._prepareSettingsList('instance');\n      }\n      return _instanceList;\n    }\n\n    async instanceLoad({ module }) {\n      const validator = await this.ctx.meta.settings.loadValidatorInstance({ module });\n      const data = await this.ctx.meta.settings.loadSettingsInstance({ module });\n      return {\n        module,\n        validator: validator.validator,\n        data,\n      };\n    }\n\n    async instanceSave({ module, data }) {\n      await this.ctx.meta.settings.saveSettingsInstance({ module, data });\n    }\n\n    // user\n\n    userList() {\n      if (!_userList) {\n        _userList = this._prepareSettingsList('user');\n      }\n      return _userList;\n    }\n\n    async userLoad({ module }) {\n      const validator = await this.ctx.meta.settings.loadValidatorUser({ module });\n      const data = await this.ctx.meta.settings.loadSettingsUser({ module });\n      return {\n        module,\n        validator: validator.validator,\n        data,\n      };\n    }\n\n    async userSave({ module, data }) {\n      await this.ctx.meta.settings.saveSettingsUser({ module, data });\n    }\n\n    //\n\n    _prepareSettingsList(scene) {\n      const list = [];\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.settings && module.main.meta.settings[scene]) {\n          const settings = module.main.meta.settings[scene];\n          const item = {\n            module: relativeName,\n            validator: settings.validator,\n          };\n          if (settings.actionComponent || settings.actionPath) {\n            item.actionModule = item.module;\n            item.actionComponent = settings.actionComponent;\n            item.actionPath = settings.actionPath;\n          }\n          list.push(item);\n        }\n      }\n      return list;\n    }\n\n  }\n\n  return Settings;\n};\n","const settings = require('./model/settings.js');\nconst settingsRef = require('./model/settingsRef.js');\n\nmodule.exports = {\n  settings,\n  settingsRef,\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    settings: {\n      global: true,\n      dependencies: 'validation',\n    },\n  };\n\n  // schedules\n  config.schedules = {\n  };\n\n  // settings\n  config.settings = {\n    instance: {\n      info: {\n        title: 'title1',\n      },\n    },\n    user: {\n      info: {\n        username: 'zhennann',\n      },\n      extra: {\n        extra: {\n          info: {\n            mobile: '1',\n            sex: 1,\n            language: 'en-us',\n          },\n        },\n      },\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  Settings: '设置',\n  test: '测试',\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","const settings = require('./middleware/settings.js');\n\nmodule.exports = {\n  settings,\n};\n","const SettingsFn = require('./adapter/settings.js');\nconst SETTINGS = Symbol('CTX#__SETTINGS');\n\nmodule.exports = () => {\n  return async function settings(ctx, next) {\n    ctx.meta = ctx.meta || {};\n    Object.defineProperty(ctx.meta, 'settings', {\n      get() {\n        if (ctx.meta[SETTINGS] === undefined) {\n          ctx.meta[SETTINGS] = new (SettingsFn(ctx))();\n        }\n        return ctx.meta[SETTINGS];\n      },\n    });\n\n    // next\n    await next();\n  };\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\nconst modelSettingsFn = require('../../../model/settings.js');\nconst modelSettingsRefFn = require('../../../model/settingsRef.js');\nconst constants = require('../../constants.js');\n\nconst Fn = module.exports = ctx => {\n\n  class Settings {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n      this._modelSettings = null;\n      this._modelSettingsRef = null;\n    }\n\n    // other module's settings\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get modelSettings() {\n      if (!this._modelSettings) this._modelSettings = new (modelSettingsFn(ctx.app))(ctx);\n      return this._modelSettings;\n    }\n\n    get modelSettingsRef() {\n      if (!this._modelSettingsRef) this._modelSettingsRef = new (modelSettingsRefFn(ctx.app))(ctx);\n      return this._modelSettingsRef;\n    }\n\n    // get\n\n    async getUser({ module, name }) {\n      return await this._get({ scene: 'user', module, name });\n    }\n\n    async getInstance({ module, name }) {\n      return await this._get({ scene: 'instance', module, name });\n    }\n\n\n    // user\n\n    async loadSettingsUser(ops) {\n      ops = ops || { };\n      return await this._loadSettings({ scene: 'user', module: ops.module });\n    }\n\n    async loadValidatorUser(ops) {\n      ops = ops || { };\n      return this._getValidator({ scene: 'user', module: ops.module });\n    }\n\n    async saveSettingsUser({ module, data }) {\n      return await this._saveSettings({ scene: 'user', module, data });\n    }\n\n    // instance\n\n    async loadSettingsInstance(ops) {\n      ops = ops || { };\n      return await this._loadSettings({ scene: 'instance', module: ops.module });\n    }\n\n    async loadValidatorInstance(ops) {\n      ops = ops || { };\n      return this._getValidator({ scene: 'instance', module: ops.module });\n    }\n\n    async saveSettingsInstance({ module, data }) {\n      return await this._saveSettings({ scene: 'instance', module, data });\n    }\n\n    // function\n\n    async _get({ scene, module, name }) {\n      module = module || this.moduleName;\n      const res = await this.modelSettingsRef.get({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.user.op.id : 0,\n        name,\n      });\n      return res ? JSON.parse(res.value) : this._parse(ctx.config.module(module).settings[scene], name);\n    }\n\n    _parse(data, path) {\n      for (const name of path.split('/')) {\n        if (name) data = data[name];\n      }\n      return data;\n    }\n\n    async _loadSettings({ scene, module }) {\n      module = module || this.moduleName;\n      const res = await this.modelSettings.get({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.user.op.id : 0,\n      });\n      // always extend config, as maybe has new values\n      const config = ctx.config.module(module).settings[scene];\n      return res ? extend(true, {}, config, JSON.parse(res.value)) : config;\n    }\n\n    async _saveSettings({ scene, module, data }) {\n      module = module || this.moduleName;\n      const validator = this._getValidator({ scene, module });\n      if (!validator) ctx.throw(404); // not found\n      await ctx.meta.validation.validate({\n        module: validator.module,\n        validator: validator.validator,\n        schema: null,\n        data });\n      // update aSettings\n      const _data = await this.modelSettings.get({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.user.op.id : 0,\n      });\n      if (!_data) {\n        // new\n        await this.modelSettings.insert({\n          module,\n          scene: constants.scene[scene],\n          userId: scene === 'user' ? ctx.user.op.id : 0,\n          value: JSON.stringify(data),\n        });\n      } else {\n        await this.modelSettings.update({\n          id: _data.id,\n          value: JSON.stringify(data),\n        });\n      }\n      // save aSettingsRef\n      await this._saveSettingsRef({ scene, module, data });\n    }\n\n    async _saveSettingsRef({ scene, module, data }) {\n      // remove aSettingsRef\n      await this.modelSettingsRef.delete({\n        module,\n        scene: constants.scene[scene],\n        userId: scene === 'user' ? ctx.user.op.id : 0,\n      });\n      // update aSettingsRef\n      await this._saveSettingsRef1({ scene, module, data, schemaName: null, path: '' });\n    }\n\n    async _saveSettingsRef1({ scene, module, data, schemaName, path }) {\n      const schema = this._getSchema({ scene, module, schemaName });\n      await this._saveSettingsRef2({ scene, module, data, schema: schema.schema, path });\n    }\n\n    async _saveSettingsRef2({ scene, module, data, schema, path }) {\n      for (const key in schema.properties) {\n        const subSchema = schema.properties[key];\n        const subPath = `${path}/${key}`;\n        const subData = data[key];\n        if (subSchema.$ref) {\n          await this._saveSettingsRef1({ scene, module, data: subData, schemaName: subSchema.$ref, path: subPath });\n        } else if (subSchema.ebType === 'group') {\n          await this._saveSettingsRef2({ scene, module, data: subData, schema: subSchema, path: subPath });\n        } else {\n          await this.modelSettingsRef.insert({\n            module,\n            scene: constants.scene[scene],\n            userId: scene === 'user' ? ctx.user.op.id : 0,\n            name: subPath,\n            value: JSON.stringify(subData),\n          });\n        }\n      }\n    }\n\n    _getValidator({ scene, module }) {\n      module = module || this.moduleName;\n      const validator = ctx.app.meta.modules[module].main.meta.settings[scene].validator;\n      return validator ? { module, scene, validator } : null;\n    }\n\n    _getSchema({ scene, module, schemaName }) {\n      const validator = this._getValidator({ scene, module });\n      if (!validator) return null;\n      const _schema = ctx.meta.validation.getSchema({ module: validator.module, validator: validator.validator, schema: schemaName });\n      return extend(true, {}, validator, { schema: _schema });\n    }\n\n  }\n\n  return Settings;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n  const meta = {\n    base: {\n      functions: {\n        settings: {\n          title: 'Settings',\n          scene: 'tools',\n          actionPath: 'instance/list',\n          sorting: 10,\n          menu: 1,\n        },\n      },\n    },\n  };\n  // only support in test\n  if (app.meta.isTest) {\n    // schemas\n    const schemas = require('./config/validation/schemas.js')(app);\n    // keywords\n    const keywords = require('./config/validation/keywords.js')(app);\n    // meta\n    extend(true, meta, {\n      settings: {\n        user: {\n          validator: 'userTest',\n        },\n        instance: {\n          validator: 'instanceTest',\n        },\n      },\n      validation: {\n        validators: {\n          userTest: {\n            schemas: 'user,userExtra',\n          },\n          instanceTest: {\n            schemas: 'instance',\n          },\n        },\n        keywords: {\n          'x-languages': keywords.languages,\n        },\n        schemas: {\n          user: schemas.user,\n          userExtra: schemas.userExtra,\n          instance: schemas.instance,\n        },\n      },\n    });\n  }\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.user = {\n    type: 'object',\n    properties: {\n      info: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          username: {\n            type: 'string',\n            ebType: 'text',\n            ebDescription: '',\n            notEmpty: true,\n          },\n        },\n      },\n      extra: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Extra Group',\n        properties: {\n          extra: {\n            ebType: 'panel',\n            ebTitle: 'Extra',\n            $ref: 'userExtra',\n          },\n        },\n      },\n    },\n  };\n  schemas.userExtra = {\n    type: 'object',\n    ebTitle: 'Extra',\n    properties: {\n      info: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          mobile: {\n            type: 'string',\n            ebType: 'text',\n            notEmpty: true,\n          },\n          sex: {\n            type: 'number',\n            ebType: 'select',\n            ebMultiple: false,\n            ebOptions: [\n              { title: 'Male', value: 1 },\n              { title: 'Female', value: 2 },\n            ],\n            ebParams: {\n              openIn: 'page',\n              closeOnSelect: true,\n            },\n          },\n          language: {\n            type: 'string',\n            ebType: 'select',\n            ebOptionsUrl: '/a/base/base/locales',\n            ebOptionsUrlParams: null,\n            'x-languages': true,\n          },\n        },\n        required: [ 'language' ],\n      },\n    },\n  };\n  schemas.instance = {\n    type: 'object',\n    properties: {\n      info: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          title: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'title',\n            ebDescription: 'website\\'s title',\n            notEmpty: true,\n          },\n        },\n      },\n    },\n  };\n  return schemas;\n};\n","const require3 = require('require3');\nconst Ajv = require3('ajv');\n\nmodule.exports = app => {\n  const keywords = {};\n  keywords.languages = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile(sch, parentSchema) {\n      const func = async function(data) {\n        const ctx = this;\n        const context = arguments.callee.context;\n        const locales = await ctx.performAction({\n          method: 'post',\n          url: context.parentSchema.ebOptionsUrl,\n          body: context.parentSchema.ebOptionsUrlParams,\n        });\n        const index = locales.findIndex(item => item.value === data);\n        if (index > -1) return true;\n        const errors = [{ keyword: 'x-languages', params: [], message: ctx.text('Not expected value') }];\n        throw new Ajv.ValidationError(errors);\n      };\n      func.context = {\n        sch, parentSchema,\n      };\n      return func;\n    },\n  };\n  return keywords;\n};\n","const version = require('./controller/version.js');\nconst settings = require('./controller/settings.js');\nconst test = require('./controller/test.js');\n\nmodule.exports = app => {\n  let routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    // settings:instance\n    { method: 'post', path: 'settings/instance/list', controller: settings, action: 'instanceList',\n      meta: { right: { type: 'function', name: 'settings' } },\n    },\n    { method: 'post', path: 'settings/instance/load', controller: settings, action: 'instanceLoad',\n      meta: { right: { type: 'function', name: 'settings' } },\n    },\n    { method: 'post', path: 'settings/instance/save', controller: settings, action: 'instanceSave',\n      meta: { right: { type: 'function', name: 'settings' } },\n    },\n    // settings:user\n    { method: 'post', path: 'settings/user/list', controller: settings, action: 'userList' },\n    { method: 'post', path: 'settings/user/load', controller: settings, action: 'userLoad' },\n    { method: 'post', path: 'settings/user/save', controller: settings, action: 'userSave' },\n  ];\n  if (app.meta.isTest) {\n    routes = routes.concat([\n      { method: 'get', path: 'test/settings', controller: test, middlewares: 'test' },\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n  class SettingsController extends app.Controller {\n\n    // instance\n\n    instanceList() {\n      const res = this.service.settings.instanceList();\n      this.ctx.successMore(res, 0, -1);\n    }\n\n    async instanceLoad() {\n      const res = await this.service.settings.instanceLoad(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async instanceSave() {\n      const res = await this.service.settings.instanceSave(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    // user\n\n    userList() {\n      const res = this.service.settings.userList();\n      this.ctx.successMore(res, 0, -1);\n    }\n\n    async userLoad() {\n      const res = await this.service.settings.userLoad(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async userSave() {\n      const res = await this.service.settings.userSave(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n  return SettingsController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  class TestController extends app.Controller {\n\n    async settings() {\n\n      // user\n\n      // get settings from config\n      let data = await this.ctx.meta.settings.getUser({ name: '/info/username' });\n      assert(data === 'zhennann');\n      data = await this.ctx.meta.settings.getUser({ name: '/extra/extra/info/language' });\n      assert(data === 'en-us');\n\n      // load settings\n      data = await this.ctx.meta.settings.loadSettingsUser();\n      assert(data.info.username === 'zhennann');\n      // save settings\n      data.extra.extra.info.language = 'zh-cn';\n      await this.ctx.meta.settings.saveSettingsUser({ data });\n\n      // get settings from db\n      data = await this.ctx.meta.settings.getUser({ name: '/extra/extra/info/language' });\n      assert(data === 'zh-cn');\n\n      // instance\n\n      // get settings from config\n      data = await this.ctx.meta.settings.getInstance({ name: '/info/title' });\n      assert(data === 'title1');\n\n      // load settings\n      data = await this.ctx.meta.settings.loadSettingsInstance();\n      assert(data.info.title === 'title1');\n      // save settings\n      data.info.title = 'title2';\n      await this.ctx.meta.settings.saveSettingsInstance({ data });\n\n      // get settings from db\n      data = await this.ctx.meta.settings.getInstance({ name: '/info/title' });\n      assert(data === 'title2');\n\n      this.ctx.success();\n    }\n\n  }\n  return TestController;\n};\n\n"],"sourceRoot":""}